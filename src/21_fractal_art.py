#!/usr/bin/env python3

import re
from math import sqrt

start = """
.#.
..#
###
"""[1:-1]


def compute(rules, cycles):
    rulemap = {}
    for rule in rules:
        rule = rule.replace("/", "")
        match = re.search("(.+) => (.+)", rule)
        key, value = match.groups()

        if len(key) == 4:
            rotations = (
                (2, 0, 3, 1),
                (3, 2, 1, 0),
                (1, 3, 0, 2),
                (1, 0, 3, 2),
                (0, 2, 1, 3),
                (2, 3, 0, 1),
                (3, 1, 2, 0)
            )
        else:
            rotations = (
                (6, 3, 0, 7, 4, 1, 8, 5, 2),
                (8, 7, 6, 5, 4, 3, 2, 1, 0),
                (2, 5, 8, 1, 4, 7, 0, 3, 6),
                (2, 1, 0, 5, 4, 3, 8, 7, 6),
                (8, 5, 2, 7, 4, 1, 6, 3, 0),
                (6, 7, 8, 3, 4, 5, 0, 1, 2),
                (0, 3, 6, 1, 4, 7, 2, 5, 8)
            )

        rulemap[key] = value
        for rotation in rotations:
            new_key = "".join([key[rotation[i]] for i in range(len(key))])
            rulemap[new_key] = value

    def split(patt):
        if len(patt) < 16:
            return patt,
        side = int(sqrt(len(patt)))
        if side % 2 == 0:
            size = 2
        else:
            size = 3

        pieces = []
        for r in range(side // size):
            for c in range(side // size):
                string = ''
                for i in range(size):
                    idx = (r * size + i) * side + c * size
                    string += patt[idx:idx + size]
                pieces.append(string)
        return pieces

    def join(patt):
        size = int(sqrt(len(patt[0])))
        side = int(sqrt(len(patt)))

        string = ''
        for r in range(side):
            for i in range(size):
                for c in range(side):
                    block = patt[r * side + c]
                    idx = i * size
                    string += block[idx:idx + size]

        return string

    pattern = start.replace("\n", "")

    for i in range(cycles):
        split_pattern = split(pattern)
        new_pattern = []
        for element in split_pattern:
            new_pattern.append(rulemap[element])
        pattern = join(new_pattern)

    return sum(p.count("#") for p in pattern)


def first(*rules):
    return compute(rules, cycles=5)


def second(*rules):
    return compute(rules, cycles=18)


if __name__ == '__main__':
    data = (
        '../.. => .##/#../..#',
        '#./.. => .##/#../###',
        '##/.. => ..#/#.#/#..',
        '.#/#. => #../#../.#.',
        '##/#. => .#./#../#..',
        '##/## => .##/.../.##',
        '.../.../... => #.#./###./####/#..#',
        '#../.../... => .###/####/##../#.##',
        '.#./.../... => ###./.###/#..#/#.##',
        '##./.../... => ..../..../.#../##..',
        '#.#/.../... => ...#/.##./..../##..',
        '###/.../... => ##../##../##.#/..##',
        '.#./#../... => .#../###./##../####',
        '##./#../... => ####/##.#/..../..##',
        '..#/#../... => ..#./####/...#/#.##',
        '#.#/#../... => #.#./##../##../.##.',
        '.##/#../... => ##../####/..#./...#',
        '###/#../... => #..#/#.#./##.#/#.#.',
        '.../.#./... => .#.#/..#./#.../....',
        '#../.#./... => ##../..##/..##/.#..',
        '.#./.#./... => ..../##../##../#.##',
        '##./.#./... => ...#/##../#..#/.###',
        '#.#/.#./... => ####/##.#/###./..##',
        '###/.#./... => ..../...#/.###/.#..',
        '.#./##./... => #.#./#..#/.##./.#.#',
        '##./##./... => .###/#.../#..#/#.#.',
        '..#/##./... => .###/####/..../#.##',
        '#.#/##./... => ...#/.###/.###/.###',
        '.##/##./... => ..##/..##/.###/##.#',
        '###/##./... => ####/#..#/####/#.#.',
        '.../#.#/... => #.##/..#./.###/#.#.',
        '#../#.#/... => ####/##.#/##.#/....',
        '.#./#.#/... => #.../...#/#.##/#..#',
        '##./#.#/... => .#.#/##../##../....',
        '#.#/#.#/... => ##.#/#.../##../.#..',
        '###/#.#/... => ...#/###./.#.#/...#',
        '.../###/... => .###/#.##/#.../###.',
        '#../###/... => ..##/.#../.###/..#.',
        '.#./###/... => ..../.##./#.##/#.##',
        '##./###/... => .#.#/##.#/#.../#.#.',
        '#.#/###/... => ..#./#.../#.#./.##.',
        '###/###/... => ..##/.#.#/#..#/.##.',
        '..#/.../#.. => ..##/.#../##.#/##..',
        '#.#/.../#.. => ..#./..../#.../...#',
        '.##/.../#.. => .##./..##/####/#...',
        '###/.../#.. => #.##/..../##../#.##',
        '.##/#../#.. => .###/...#/###./....',
        '###/#../#.. => .#.#/#.#./#.##/..#.',
        '..#/.#./#.. => ...#/..#./..##/.#.#',
        '#.#/.#./#.. => #.../##.#/.###/#.#.',
        '.##/.#./#.. => ###./####/#..#/##.#',
        '###/.#./#.. => ..../..#./..../#...',
        '.##/##./#.. => .#.#/.##./.#.#/#.##',
        '###/##./#.. => ..../##../###./.#.#',
        '#../..#/#.. => ...#/#.../#.##/.###',
        '.#./..#/#.. => #..#/.#../###./#.#.',
        '##./..#/#.. => #.#./..#./###./###.',
        '#.#/..#/#.. => .#.#/##.#/##../####',
        '.##/..#/#.. => ###./..../.#../...#',
        '###/..#/#.. => #.#./.##./.#.#/#..#',
        '#../#.#/#.. => #.#./##.#/.#../.###',
        '.#./#.#/#.. => ##.#/#.#./#.../####',
        '##./#.#/#.. => .#.#/#.../..#./#.##',
        '..#/#.#/#.. => ##.#/.##./#.../.###',
        '#.#/#.#/#.. => ..##/..../..../####',
        '.##/#.#/#.. => ####/#.#./###./.#.#',
        '###/#.#/#.. => #.##/..#./##../#...',
        '#../.##/#.. => ..##/##.#/####/.#..',
        '.#./.##/#.. => ..##/##../.#../..##',
        '##./.##/#.. => ..##/.#.#/#..#/....',
        '#.#/.##/#.. => #.../##../...#/.#.#',
        '.##/.##/#.. => ##../...#/.###/.#.#',
        '###/.##/#.. => ####/..#./.##./#.##',
        '#../###/#.. => .#.#/##.#/#.#./#.#.',
        '.#./###/#.. => .###/#..#/.#.#/###.',
        '##./###/#.. => ##../.#../###./.#.#',
        '..#/###/#.. => #.##/..../...#/..#.',
        '#.#/###/#.. => #.../#..#/..../.#..',
        '.##/###/#.. => ####/#..#/..#./.#.#',
        '###/###/#.. => .##./##../.#../..#.',
        '.#./#.#/.#. => #.#./.###/#.#./..##',
        '##./#.#/.#. => .##./..../..##/##..',
        '#.#/#.#/.#. => ...#/..../.#.#/..##',
        '###/#.#/.#. => .#../####/#.#./#.##',
        '.#./###/.#. => #..#/.#.#/#..#/#.#.',
        '##./###/.#. => .#../##../#..#/..##',
        '#.#/###/.#. => #.#./.##./##.#/.#.#',
        '###/###/.#. => #.#./...#/..##/#...',
        '#.#/..#/##. => ..#./..#./...#/#..#',
        '###/..#/##. => #..#/###./..../##.#',
        '.##/#.#/##. => #.##/.#.#/...#/..##',
        '###/#.#/##. => #.##/...#/.##./.###',
        '#.#/.##/##. => ..../##.#/..../...#',
        '###/.##/##. => .###/#.../###./###.',
        '.##/###/##. => #.../#.#./.###/..#.',
        '###/###/##. => #.##/.#../..#./.#.#',
        '#.#/.../#.# => .##./##../###./.###',
        '###/.../#.# => ..##/...#/###./.#..',
        '###/#../#.# => ##.#/..#./#.##/.#..',
        '#.#/.#./#.# => .#../#.##/...#/###.',
        '###/.#./#.# => ..#./..../####/####',
        '###/##./#.# => ###./#..#/..../#..#',
        '#.#/#.#/#.# => ##.#/###./..../#...',
        '###/#.#/#.# => ##../.###/#..#/.#..',
        '#.#/###/#.# => #.../###./.###/..#.',
        '###/###/#.# => ..../.##./.#../###.',
        '###/#.#/### => ##../#.../.###/#...',
        '###/###/### => .###/###./#.##/..#.',
    )

    res = first(*data)
    print(">>> %s" % res)

    res = second(*data)
    print(">>> %s" % res)
